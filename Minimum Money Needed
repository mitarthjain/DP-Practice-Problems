Cody went to the market to buy some oranges for his N friends.
There he finds orange wrapped in packets, with the price of i^th packet as val[i].
Now he wants to buy exactly W kg oranges, so he wants you to tell him what minimum price he should pay to buy exactly W kg oranges. 
Weight of i^th packet is i kg. If price of i^th packet is -1 then this packet is not available for sale. 
The market has infinite supply of orange packets.

Input Format
First line of input contains two space separated integers N and W, the number of friend he has and the amount of Oranges in kilograms which he should buy.

The second line contains W space separated integers in which the i^th^ integer specifies the price of a ‘i’kg apple packet. A value of -1 denotes that the corresponding packet is unavailable

Constraints
1 <= N,W,val[ ] <= 10^3

Output Format
Output a single integer denoting the minimum price Code should pay to get exactly W kg oranges. Else print -1 if it is not possible to fill the bag.

***********************************
This problem is can be reduced to 0-1 Knapsack Problem. So in cost array, we first ignore those packets which are not available i.e; cost is -1 and then traverse the cost array and create two array val[] for storing cost of ‘i’ kg packet of orange and wt[] for storing weight of corresponding packet. Suppose cost[i] = 50 so weight of packet will be i and cost will be 50.
Algorithm :

Create matrix min_cost[n+1][W+1], where n is number of distinct weighted packets of orange and W is maximum capacity of bag.
Initialize 0th row with INF (infinity) and 0th Column with 0.
Now fill the matrix
if wt[i-1] > j then mincost[i][j] = mincost[i-1][j] ;
if wt[i-1] <= j then mincost[i][j] = min(mincost[i-1][j], val[i-1] + min_cost[i][j-wt[i-1]]);
If mincost[n][W]==INF then output will be -1 because this means that we cant not make make weight W by using these weights else output will be mincost[n][W].

import java.util.*;
public class Main {
    public static void main(String args[]) {
        // Your Code Here

        Scanner scn = new Scanner(System.in);
        int N = scn.nextInt();
        int W = scn.nextInt();

        int[] prices = new int[W];

        for(int i =0;i < W;i++) prices[i] = scn.nextInt();
        int[][] strg = new int[prices.length + 1][W + 1];

        for(int[] arr : strg){
            Arrays.fill(arr, -1);
        }

        System.out.println(MinMoney(prices, 0, prices.length, strg));
    }

   public static int MinMoney(int[] prices, int vidx, int cap, int[][] strg) {

        if (cap == 0) {
            return 0;
        }

        if (vidx == prices.length) {
            return 10000000;
        }

        if (strg[vidx][cap] != -1) {
            return strg[vidx][cap];
        }

        int inc = 10000000;
        if (cap >= vidx + 1 && prices[vidx] != -1) {
            inc = MinMoney(prices, vidx, cap - vidx - 1, strg) + prices[vidx];
        }
        int exc = MinMoney(prices, vidx + 1, cap, strg);

        return strg[vidx][cap] = Math.min(inc, exc);
    }
}
