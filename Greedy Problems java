**************************** Minimum Absolute Difference in an Array ***************************************
import java.util.*;
public class Solution {

	public static int minAbsoluteDifference(int input[]) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
		 * Taking input and printing output is handled automatically.
         
		 */
        Arrays.sort(input);
        int n=input.length;
        int d=Integer.MAX_VALUE;
        for(int i=0;i<n-1;i++){
            if((input[i+1]-input[i])<d){
                d=input[i+1]-input[i];
            }
        }
        return d;
        

	}
}
******************************** Nikunj and Donuts ************************************************************
import java.util.*;

public class Main {

	
	public static void main(String[] args) {
		// Write fyour code here
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int[] ar=new int[n];
        for(int i=0;i<n;i++){
            ar[i]=sc.nextInt();
        }
        Arrays.sort(ar);
        long ans=0;
        for(int i=n-1;i>=0;i--){
            ans+=ar[i]*(Math.pow(2,n-i-1));
        }
        System.out.println(ans);
        
        

	}

}
***************************************** Activity Selection ****************************************
import java.util.*;

import java.io.*;


public class Main
{
    static class Activity
    {
        int start,finish;
    }
    public static void main (String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Activity[] a = new Activity[n];
        for(int i=0; i<n; i++)
        {
            a[i] = new Activity();
            a[i].start = sc.nextInt();
            a[i].finish = sc.nextInt();

        }
        Arrays.sort(a, new Comparator<Activity>()
        {
            @Override
            public int compare(Activity o1, Activity o2)
            {
                if(o1.finish==o2.finish)
                    return 0;
                if(o1.finish>o2.finish)
                    return 1;
                return -1;
            }
        });
        int count=1,max=a[0].finish;
        for(int i=1; i<n; i++)
        {
            if(a[i].start>=max)
            {
                count++;
                max=a[i].finish;

            }
        }
        System.out.println(count);
    }
}
*************************************************** Fractional KnapSnack ******************************
import java.util.*;
 
public class Main {
    public static void main(String args[] ) throws Exception {
        Scanner sc = new Scanner(System.in);
        
        int n = sc.nextInt();
        long d = sc.nextLong();
        
        PriorityQueue<Painter> pq = new PriorityQueue<Painter>(n, paintComp);
        Painter p;
        for(int i=0;i<n;i++) {
        	long time = sc.nextLong();
        	long cost = sc.nextLong();
        	long unit = sc.nextLong();
        	p = new Painter(time,cost,unit);
        	pq.add(p);
        }
        
        long totalCost = 0;
        long prevTime = 0;
        long prevUnit = 0;
        long maxUnit = Long.MIN_VALUE;
        while(!pq.isEmpty() && d > 0) {
        	p = pq.poll();
        	long time = p.getTime();
        	long cost = p.getCost();
        	long unit = p.getUnit();
        	
        	if(prevTime != 0) {
        		d = d - (time - prevTime) * prevUnit;
        		if(d <= 0)
        			break;
        	}
        	if(maxUnit < unit) {
        		maxUnit = unit;
        		totalCost += cost;
        		prevUnit = unit;
        	}
        	prevTime = time;
        }
        System.out.println(totalCost);
    }
    
    public static Comparator<Painter> paintComp = new Comparator<Painter>(){
        public int compare(Painter p1, Painter p2) {
            if(p1.getTime() < p2.getTime())
    			return -1;
    		else if(p1.getTime() > p2.getTime())
    			return 1;
    		else {
    			if(p1.getUnit() < p2.getUnit())
    				return 1;
    			else if(p1.getUnit() > p2.getUnit())
    				return -1;
    			else {
    				if(p1.getCost() < p2.getCost())
    					return -1;
    				else
    					return 1;
    			}
    		}
        }
    };
    
    static class Painter {
    	long time;
    	long cost;
    	long unit;
    	
    	Painter(long time,long cost, long unit) {
    		this.time = time;
    		this.cost = cost;
    		this.unit = unit;
    	}
    	
    	public long getTime() {
    		return time;
    	}
    	
    	public long getCost() {
    		return cost;
    	}
    	
    	public long getUnit() {
    		return unit;
    	}
    }
}
************************************************* Perimeter and Conditions ************************
import java.util.*;

public class Main {
    
    static void maxP(int[] a,int n){
    Arrays.sort(a);
        for(int i=n-1;i>=2;i--){
            int x=a[i];
            int y=a[i-1];
            int z=a[i-2];
            if(x+y>z && y+z>x && x+z>y){
                System.out.print(z+" "+y+" "+x);
                return;
                
                
            }
        }
    System.out.println("-1");
    return;
}
    public static void main(String[] args) {
        /* Your class should be named Main.
         * Read input as specified in the question.
         * Print output as specified in the question.
         */
        
        // Write your code here
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int[] a=new int[n];
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();
            
        }
        maxP(a,n);
        
        
        
    }
    
}

*********************************************** Problems with Discussions **************************
import java.util.*;

public class Main {
    static int pD(int[] a,int n,int k){
        Arrays.sort(a);
        int small=a[0]+k;
        int big=a[n-1]-k;
        if(small>big){
            int temp=small;
            small=big;
            big=temp;
        
        }
        int ans=a[n-1]-a[0];
        for(int i=1;i<n-1;i++){
            int sub=a[i]-k;
            int add=a[i]+k;
            if(sub>=small || add<=big){
                continue;
            }
            if(big-sub<=add-small){
                small=sub;
            }
            else{
                big=add;
            }
        }
        ans=Math.min(ans,big-small);
        return ans;
    }
	
	public static void main(String[] args) {
		// Write your code here
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int k=sc.nextInt();
        int[] a=new int[n];
        for(int i=0;i<n;i++){
            a[i]=sc.nextInt();
        }
        System.out.println(pD(a,n,k));
        

	}

}
********************************************* Winning the lottery **************************************
import java.util.Scanner;

public class Main {
    static void find(int s,int d){
        if(s==0){
            if(d==1){
                System.out.println("0");
                return;
            }
            else{
                System.out.println("Not Possible");
            }
        }
        if(s>9*d){
            
            System.out.println("Not Possible");
            return;
        }
        int[] a=new int[d];
        s-=1;
        for (int i=d-1; i>0; i--){  
        if (s > 9) 
        { 
            a[i] = 9; 
            s -= 9; 
        } 
        else
        { 
            a[i] = s; 
            s = 0; 
        } 
        }
        a[0]=s+1;
        for(int i=0;i<d;i++){
            System.out.print(a[i]);
            
        }
        
    }

	
	public static void main(String[] args) {
		/* Your class should be named Main.
 			* Read input as specified in the question.
 			* Print output as specified in the question.
		*/

		// Write your code here
        Scanner sc=new Scanner(System.in);
        int s=sc.nextInt();
        int d=sc.nextInt();
        find(s,d);
        

	}

}
